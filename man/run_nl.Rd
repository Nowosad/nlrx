% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_nl.R
\name{run_nl}
\alias{run_nl}
\title{Execute NetLogo simulation}
\usage{
run_nl(nl, seed, siminputrow, cleanup = "all")
}
\arguments{
\item{nl}{nl object}

\item{seed}{a random seed for the NetLogo simulation}

\item{siminputrow}{rownumber of the input tibble within the attached simdesign object that should be executed}

\item{cleanup}{indicate which filetypes should be deleted}
}
\value{
tibble with simulation output results
}
\description{
Execute NetLogo simulation from a nl object with a defined experiment and simdesign
}
\details{
run_nl executes one simulation of the specified NetLogo model within the provided nl object.
The random seed is set within the NetLogo model to control stochasticity.
The run id defines which row of the input data tibble within the simdesign object of the provided nl object is executed.
Cleanup can either be ".xml" to delete all temporarily created xml files; ".csv" to delete all temporarily created csv files or "all" to delete all temporarily created files.

This function can be used to run single simulations of a NetLogo model.
It can also be used within a loop environment that loops over the input tibble and the simseeds of the attached simdesign to run a full simulation of all input combinations and seeds.
We suggest to use the furrr package function future_map_dfr to loop over simulations.
This approach enables singlecore and multicore simulations on local machines and remote HPC clusters.
}
\examples{
\dontrun{

# Run one simulation:
results <- run_nl(nl=nl,
seed=simseeds(nl)[1],
run=1,
cleanup="all")

# Run all simulations on local machine in parallel:

library(furrr)
plan(multisession)
results \%<-\% furrr::future_map_dfr(getsim(nl, "simseeds"), function(seed){
  furrr::future_map_dfr(seq_len(nrow(getsim(nl, "siminput"))), function(siminputrow) {
      run_nl(nl = nl,
             seed = seed,
             siminputrow = siminputrow,
             cleanup = "all")
   })
 })
}
}
